version: '3'

env:
  KAFKA_TOPIC: test-topic
  SVIX_TOKEN: testsk_CSkhagouqu-JXgZznr35dG2TYTmsCPnb
  SVIX_APP_ID: app_2CqvO4XINy9ucWhqGPFXj4EkNS7

vars:
  SERVICE: webhooks
  APP_VERSION: develop
  APP_SHA: ksjfsldkf

  PKG: "./..."
  FAILFAST: "-failfast"
  TIMEOUT: "2m"
  RUN: "''"

tasks:
  default:
    cmds:
      - task: lint
      - task: tests:local

  lint:
    cmds:
      - golangci-lint run -v --fix

  tests:local:
    cmds:
      - task: mongo
      - task: kafka
      - >
        go test -v -p 1 {{.FAILFAST}} -coverpkg {{.PKG}} -coverprofile coverage.out -covermode atomic
        -run {{.RUN}} -timeout {{.TIMEOUT}} {{.PKG}} |
        sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' |
        sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' |
        sed ''/RUN/s//$(printf "\033[34mRUN\033[0m")/''
      - task: coverage

  tests:
    cmds:
      - task: mongo
      - task: kafka
      - go test -p 1 -coverpkg ./... -coverprofile coverage.out -covermode atomic ./...

  ci:
    cmds:
      - go env -w GOPRIVATE=github.com/numary/go-libs-cloud
      - go mod vendor

  build:
    run: once
    cmds:
      - docker build -t numary:{{.SERVICE}}-{{.APP_SHA}} --target app --build-arg APP_SHA={{.APP_SHA}} --build-arg APP_VERSION={{.APP_VERSION}} .

  push-staging:
    cmds:
      - docker tag numary:{{.SERVICE}}-{{.APP_SHA}} 955332203423.dkr.ecr.eu-west-1.amazonaws.com/numary:pull-{{.SERVICE}}-{{.APP_SHA}}
      - docker push 955332203423.dkr.ecr.eu-west-1.amazonaws.com/numary:pull-{{.SERVICE}}-{{.APP_SHA}}

  push-main:
    cmds:
      - docker tag numary:{{.SERVICE}}-{{.APP_SHA}} 955332203423.dkr.ecr.eu-west-1.amazonaws.com/numary:{{.SERVICE}}-main
      - docker push 955332203423.dkr.ecr.eu-west-1.amazonaws.com/numary:{{.SERVICE}}-main

  push-prod:
    cmds:
      - docker tag numary:{{.SERVICE}}-{{.APP_SHA}} 288350113309.dkr.ecr.eu-west-1.amazonaws.com/numary:{{.SERVICE}}-{{.APP_VERSION}}
      - docker push 288350113309.dkr.ecr.eu-west-1.amazonaws.com/numary:{{.SERVICE}}-{{.APP_VERSION}}

  build-and-install-binary:
    cmds:
      - go build -o {{.SERVICE}}
      - cp {{.SERVICE}} $(go env GOPATH)/bin

  install:
    deps: [install:golangci-lint]

  install:golangci-lint:
    cmds:
      - golangci-lint --version
      - >
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
        sh -s -- -b $(go env GOPATH)/bin latest
      - golangci-lint --version

  mongo:
    cmds:
      - docker compose up -d mongo

  kafka:
    cmds:
      - docker compose up -d redpanda redpanda-ui
      - docker compose exec -ti redpanda rpk topic create {{.KAFKA_TOPIC}} || exit 0

  coverage:
    cmds:
      - go tool cover -html=coverage.out -o coverage.html
      - echo "To open the html coverage file, use one of the following commands:"
      - echo "open coverage.html on mac"
      - echo "xdg-open coverage.html on linux"
    silent: true

  clean:
    cmds:
      - go clean
      - rm -f {{.SERVICE}} coverage.out coverage.html
      - docker compose down -v
